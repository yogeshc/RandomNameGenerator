from random import randint
import sys

adjs = [
"autumn", "hidden", "enigmatic", "bitter", "misty", "silent", "empty", "dry", "dark",
"summer", "icy", "delicate", "quiet", "white", "cool", "spring", "winter",
"patient", "twilight", "dawn", "crimson", "wispy", "weathered", "blue",
"billowing", "broken", "cold", "damp", "falling", "frosty", "green",
"long", "late", "lingering", "bold", "little", "morning", "muddy", "old",
"red", "rough", "still", "small", "sparkling", "throbbing", "shy",
"wandering", "withered", "wild", "black", "young", "holy", "solitary",
"fragrant", "aged", "snowy", "proud", "floral", "restless", "divine",
"polished", "ancient", "purple", "lively", "nameless", "glacial"
]
nouns = [
"waterfall", "river", "breeze", "moon", "rain", "wind", "sea", "morning",
"snow", "lake", "sunset", "pine", "shadow", "leaf", "dawn", "glitter",
"forest", "hill", "cloud", "meadow", "sun", "glade", "bird", "brook",
"butterfly", "bush", "dew", "dust", "field", "fire", "flower", "firefly",
"feather", "grass", "haze", "mountain", "night", "pond", "darkness",
"snowflake", "silence", "sound", "sky", "shape", "surf", "thunder",
"violet", "water", "wildflower", "wave", "water", "resonance", "sun",
"wood", "dream", "cherry", "tree", "fog", "frost", "voice", "paper",
"frog", "smoke", "star", "ravine"
]

def getMultipleNames(nos):
    """prevent un-necessarily large input values
       this func will prevent number of output names requested
       to be larger than those list of names can generate"""
    # The randint() functional is not going to generate all unique
    # values, but we don't want un-necessarily long wait times
    # for getting outputs which are very large but have very few
    # unique values
    if nos==1:
        return nos
    if nos>(len(adjs)*len(nouns)):
        print "The available list can only generate %d unique names"\
              ,(len(adjs)*len(nouns))
        print "resetting your input to maximum possible"
        nos = len(adjs)*len(nouns)
        return nos

def uniqueList():
    """ Get a 'set' of names from the 'list' of generated names"""
    unique_names=len(set(names))
    print "generated %d unique names"%unique_names
    return unique_names

def generateNames(nos):
    #Set a list in which names will be filled up    
    names=[]
    #Assigning these values outside for loop prevents repeated calculation
    #which lowers the run-time considerably for larger values of nos
    adj_len=len(adjs)-1
    noun_len=len(nouns)-1
    assert nos<=(adj_len+1)*(noun_len+1)
    for i in range(nos):
        rnd1 = randint(0,adj_len)
        rnd2 = randint(0,noun_len)
        temp_name = str(adjs[rnd1])+ '-' + str(nouns[rnd2])
        names.append(temp_name)
    return names

def main():
    """
        This is a random name generator will will provide names like the ones
        generated by heroku
        Usage:
        $python random_name_generator.py <number_of_names_to_generate(optional)>
    """
    #get nos as the number of names to be generated from command line argument
    try:
        nos = int(sys.argv[1])
    except:
        # the default value is set to 1 in case user does not provide arguments
        nos = 1
    finally:
        #Call function to correct nos value if required
        nos=getMultipleNames(nos)
    names=generateNames(nos)
    #To get a list of unique names only uncomment the call to uniqueList()
    #uniqueList()
    print names

if __name__=="__main__":
    main()
